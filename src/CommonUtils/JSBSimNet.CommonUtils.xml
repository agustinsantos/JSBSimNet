<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JSBSimNet.CommonUtils</name>
    </assembly>
    <members>
        <member name="T:CommonUtils.Collections.CollectionHelpers">
            <summary>
            Code from: https://github.com/StephenCleary/Deque
            </summary>
        </member>
        <member name="T:CommonUtils.Collections.Deque`1">
             <summary>
             A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            
             Original code from https://github.com/StephenCleary/Deque
             </summary>
        </member>
        <member name="F:CommonUtils.Collections.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:CommonUtils.Collections.Deque`1._buffer">
            <summary>
            The circular _buffer that holds the view.
            </summary>
        </member>
        <member name="F:CommonUtils.Collections.Deque`1._offset">
            <summary>
            The offset into <see cref="F:CommonUtils.Collections.Deque`1._buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.Collections.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.Collections.Deque`1"/> class with the elements 
            from the specified collection.
            </summary>
            <param name="collection">The collection. May not be <c>null</c>.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.Collections.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.CopyToArray(System.Array,System.Int32)">
            <summary>
            Copies the deque elemens into an array. The resulting array always has all the deque elements contiguously.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The optional index in the destination array at which to begin writing.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:CommonUtils.Collections.Deque`1._buffer"/> than the end).
            </summary>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:CommonUtils.Collections.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:CommonUtils.Collections.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:CommonUtils.Collections.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:CommonUtils.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:CommonUtils.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:CommonUtils.Collections.Deque`1._offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:CommonUtils.Collections.Deque`1._offset"/> after it was incremented.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:CommonUtils.Collections.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:CommonUtils.Collections.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:CommonUtils.Collections.Deque`1._offset"/>. May not be negative or greater than <see cref="P:CommonUtils.Collections.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:CommonUtils.Collections.Deque`1._offset"/> before it was decremented.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:CommonUtils.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:CommonUtils.Collections.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:CommonUtils.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:CommonUtils.Collections.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert. The sum of <c>collection.Count</c> and <see cref="P:CommonUtils.Collections.Deque`1.Count"/> must be less than or equal to <see cref="P:CommonUtils.Collections.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:CommonUtils.Collections.Deque`1.Count"/>.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:CommonUtils.Collections.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:CommonUtils.Collections.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.Resize(System.Int32,`0)">
            <summary>
             Resizes the container so that it contains n elements.
             If the given size is greater than the current size, then new elements are inserted at the end of the deque.
             If the given size is smaller than the current size, then extra elements are destroyed.
            </summary>
            <param name="size">New container size, expressed in number of elements.</param>
            <param name="value">Object whose content is copied to the added elements in case that n is greater than the current container size.
            If not specified, the default constructor is used instead.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.Assign(System.Int32,`0)">
            <summary>
            Assigns new contents to the deque container, replacing its current contents, and modifying its size accordingly.
            </summary>
            <param name="size">New size for the container.</param>
            <param name="value">Value to fill the container with. Each of the n elements in the container will be initialized to a copy of this value.</param>
        </member>
        <member name="M:CommonUtils.Collections.Deque`1.ToArray">
            <summary>
            Creates and returns a new array containing the elements in this deque.
            </summary>
        </member>
        <member name="T:CommonUtils.IO.ReaderText">
            <summary>
            Summary description for ReaderText.
            </summary>
        </member>
        <member name="F:CommonUtils.IO.XmlExtensions.log">
            <summary>
            Define a static logger variable so that it references the
            Logger instance.
            
            NOTE that using System.Reflection.MethodBase.GetCurrentMethod().DeclaringType
            is equivalent to typeof(LoggingExample) but is more portable
            i.e. you can copy the code directly into another class without
            needing to edit the code.
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.MomentType">
            <summary>
            Moments L, M, N
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.RateType">
            <summary>
            Rates P, Q, R
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.VelocityType">
            <summary>
            Velocities U, V, W
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.PositionType">
            <summary>
            Positions X, Y, Z
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.EulerAngleType">
            <summary>
            Euler angles Phi, Theta, Psi
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.StabilityAxisForces">
            <summary>
            Stability axis forces, Drag, Side force, Lift
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.LocalOrientation">
            <summary>
            Local frame orientation Roll, Pitch, Yaw
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.LocalPosition">
            <summary>
            Local frame position North, East, Down
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.LocationsType">
            <summary>
            Locations Radius, Latitude, Longitude
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.ConversionType">
            <summary>
            Conversion specifiers
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.Conversion">
            <summary>
            JSBSim Base class.
            This class provides universal constants, utility functions, messaging
            functions, and enumerated constants to JSBSim.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.KelvinToFahrenheit(System.Double)">
            <summary>
            Converts from degrees Kelvin to degrees Fahrenheit.
            </summary>
            <param name="kelvin">The temperature in degrees Kelvin</param>
            <returns>The temperature in Fahrenheit</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.CelsiusToRankine(System.Double)">
            <summary>
            Converts from degrees Celsius to degrees Rankine.
            </summary>
            <param name="celsius">celsius The temperature in degrees Celsius.</param>
            <returns>The temperature in Rankine.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.RankineToCelsius(System.Double)">
            <summary>
            Converts from degrees Rankine to degrees Celsius.
            </summary>
            <param name="rankine">rankine The temperature in degrees Rankine.</param>
            <returns>The temperature in Celsius.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.KelvinToRankine(System.Double)">
            <summary>
            Converts from degrees Kelvin to degrees Rankine.
            </summary>
            <param name="kelvin">kelvin The temperature in degrees Kelvin.</param>
            <returns>The temperature in Rankine.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.RankineToKelvin(System.Double)">
            <summary>
            Converts from degrees Rankine to degrees Kelvin.
            </summary>
            <param name="rankine">rankine The temperature in degrees Rankine.</param>
            <returns>The temperature in Kelvin.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.FahrenheitToCelsius(System.Double)">
            <summary>
            Converts from degrees Fahrenheit to degrees Celsius.
            </summary>
            <param name="fahrenheit">The temperature in degrees Fahrenheit.</param>
            <returns>The temperature in Celsius.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.CelsiusToFahrenheit(System.Double)">
            <summary>
            Converts from degrees Celsius to degrees Fahrenheit.
            </summary>
            <param name="celsius">The temperature in degrees Celsius.</param>
            <returns>The temperature in Fahrenheit.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.CelsiusToKelvin(System.Double)">
            <summary>
            Converts from degrees Celsius to degrees Kelvin
            </summary>
            <param name="celsius">The temperature in degrees Celsius.</param>
            <returns>The temperature in Kelvin.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.KelvinToCelsius(System.Double)">
            <summary>
            Converts from degrees Kelvin to degrees Celsius
            </summary>
            <param name="kelvin">The temperature in degrees Kelvin.</param>
            <returns>The temperature in Celsius.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.FeetToMeters(System.Double)">
            <summary>
            Converts from feet to meters
            </summary>
            <param name="measure">The length in feet.</param>
            <returns>The length in meters.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.PitotTotalPressure(System.Double,System.Double)">
            <summary>
            Compute the total pressure in front of the Pitot tube. It uses the
            Rayleigh formula for supersonic speeds(See "Introduction to Aerodynamics
            of a Compressible Fluid - H.W.Liepmann, A.E.Puckett - Wiley &#38; sons
            (1947)" §5.4 pp 75-80)
            </summary>
            <param name="mach">The Mach number</param>
            <param name="p">Pressure in psf</param>
            <returns>The total pressure in front of the Pitot tube in psf</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.MachFromImpactPressure(System.Double,System.Double)">
            <summary>
            Compute the Mach number from the differential pressure (qc) and the
            static pressure. Based on the formulas in the US Air Force Aircraft
            Performance Flight Testing Manual (AFFTC-TIH-99-01).
            </summary>
            <param name="qc">The differential/impact pressure</param>
            <param name="p">Pressure in psf</param>
            <returns>The Mach number</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.VcalibratedFromMach(System.Double,System.Double)">
            <summary>
            Calculate the calibrated airspeed from the Mach number. Based on the
            formulas in the US Air Force Aircraft Performance Flight Testing 
            Manual (AFFTC-TIH-99-01).
            </summary>
            <param name="mach">The Mach number</param>
            <param name="p">Pressure in psf</param>
            <returns>The calibrated airspeed (CAS) in ft/s</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Conversion.MachFromVcalibrated(System.Double,System.Double)">
            <summary>
            Calculate the Mach number from the calibrated airspeed.Based on the
            formulas in the US Air Force Aircraft Performance Flight Testing 
            Manual(AFFTC-TIH-99-01).
            </summary>
            <param name="vcas">The calibrated airspeed (CAS) in ft/s</param>
            <param name="p">Pressure in psf</param>
            <returns>The Mach number</returns>
        </member>
        <member name="T:CommonUtils.MathLib.MathExt">
            <summary>
            Various constant definitions and math functions.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.MathExt.EPSILON">
            <summary>
            For divide by zero avoidance, this will be close enough to zero
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.MathExt.DBL_EPSILON">
            <summary>
            smallest such that 1.0+DBL_EPSILON != 1.0
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.MathExt.FLT_EPSILON">
            <summary>
            smallest such that 1.0+FLT_EPSILON != 1.0
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.MathExt.EqualToRoundoff(System.Double,System.Double)">
            <summary>
            Finite precision comparison.
            </summary>
            <param name="a">first value to compare</param>
            <param name="b">second value to compare</param>
            <returns>if the two values can be considered equal up to roundoff</returns>
        </member>
        <member name="M:CommonUtils.MathLib.MathExt.EqualToRoundoff(System.Single,System.Single)">
            <summary>
            Finite precision comparison.
            </summary>
            <param name="a">first value to compare</param>
            <param name="b">second value to compare</param>
            <returns>if the two values can be considered equal up to roundoff</returns>
        </member>
        <member name="M:CommonUtils.MathLib.MathExt.EqualToRoundoff(System.Single,System.Double)">
            <summary>
            Finite precision comparison.
            </summary>
            <param name="a">first value to compare</param>
            <param name="b">second value to compare</param>
            <returns>if the two values can be considered equal up to roundoff</returns>
        </member>
        <member name="M:CommonUtils.MathLib.MathExt.EqualToRoundoff(System.Double,System.Single)">
            <summary>
            Finite precision comparison.
            </summary>
            <param name="a">first value to compare</param>
            <param name="b">second value to compare</param>
            <returns>if the two values can be considered equal up to roundoff</returns>
        </member>
        <member name="M:CommonUtils.MathLib.MathExt.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrain a value between a minimum and a maximum value.
            </summary>
            <param name="min">the min limit</param>
            <param name="value">the value to constrain</param>
            <param name="max">the max limit</param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.MathLib.Filter">
            <summary>
            First order, (low pass / lag) filter
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.Constants">
            <summary>
            Summary description for Constants.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.Rstar">
            <summary>
            Universal gas constant - ft*lbf/R/mol
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.Mair">
            <summary>
            Mean molecular weight for air - slug/mol
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.Reng">
            <summary>
            Specific Gas Constant,ft^2/(sec^2*R)
            Atmosphere constants in British units converted from the SI values specified in the 
            ISA document - https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19770009539.pdf
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.ONE_SECOND">
            <summary>
            pi/180/60/60, or about 100 feet at earths' equator 
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.EARTH_RAD">
            <summary>
            Radius of Earth in kilometers at the equator.  Another source had
            6378.165 but this is probably close enough
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.EQUATORIAL_RADIUS_FT">
            <summary>
            Value of earth radius from LaRCsim (ft) 
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.EQUATORIAL_RADIUS_M">
            <summary>
            Value of earth radius from LaRCsim (meter)
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.EQ_RAD_SQUARE_FT">
            <summary>
            Radius squared (ft)
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.EQ_RAD_SQUARE_M">
            <summary>
            Radius squared (meter)
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Constants.ARCSEC_TO_RAD">
            Arc seconds to radians.  (arcsec*pi)/(3600*180) = rad 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.RAD_TO_ARCSEC">
            Radians to arc seconds.  (rad*3600*180)/pi = arcsec 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.FEET_TO_METER">
            Feet to Meters 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.METER_TO_FEET">
            Meters to Feet 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.METER_TO_NM">
            Meters to Nautical Miles.  1 nm = 6076.11549 feet 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.NM_TO_METER">
            Nautical Miles to Meters 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.METER_TO_SM">
            Meters to Statute Miles. 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.SM_TO_METER">
            Statute Miles to Meters. 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.NM_TO_RAD">
            Radians to Nautical Miles.  1 nm = 1/60 of a degree 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.RAD_TO_NM">
            Nautical Miles to Radians 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.MPS_TO_KT">
            Miles per second to Knots 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.KT_TO_MPS">
            Knots to Miles per second 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.MPS_TO_MPH">
            Miles per second to Miles per hour 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.MPH_TO_MPS">
            Miles per hour to Miles per second 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.MPS_TO_KMH">
            Meters per second to Kilometers per hour 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.KMH_TO_MPS">
            Kilometers per hour to Miles per second 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.PASCAL_TO_INHG">
            Pascal to Inch Mercury 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.INHG_TO_PA">
            Inch Mercury to Pascal 
        </member>
        <member name="F:CommonUtils.MathLib.Constants.g0">
            <summary>
            Sea-level acceleration of gravity - ft/s^2.
            This constant is defined to compute the International Standard Atmosphere.
            It is by definition the sea level gravity at a latitude of 45deg.This
            value is fixed whichever gravity model is used by FGInertial.
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.Matrix3D">
            <summary>
            Matrix class for 3D.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M11">
            <summary>
            First row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M12">
            <summary>
            First row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M13">
            <summary>
            First row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M21">
            <summary>
            Second row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M22">
            <summary>
            Second row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M23">
            <summary>
            Second row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M31">
            <summary>
            Third row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M32">
            <summary>
            Third row.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.M33">
            <summary>
            Third row.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Matrix3D"/> class using given values.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Matrix3D"/> class using values from a given array.
            </summary>
            <param name="elements">The matrix values.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.#ctor(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Matrix3D"/> class using given 3D vectors.
            </summary>
            <param name="column1">The vector to use as the first column.</param>
            <param name="column2">The vector to use as the second column.</param>
            <param name="column3">The vector to use as the third column.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.#ctor(CommonUtils.MathLib.Matrix3D)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Matrix3D"/> class using a given matrix.
            </summary>
            <param name="m">The matrix to copy values from.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Vector3D"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.Zero">
            <summary>
            Zero matrix.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Matrix3D.Identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetHashCode">
            <summary>
            Get the hashcode for this <see cref="T:CommonUtils.MathLib.Matrix3D"/> instance.
            </summary>
            <returns>Returns the hash code for this <see cref="T:CommonUtils.MathLib.Matrix3D"/> instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Equals(System.Object)">
            <summary>
            Checks if a given matrix equals to self.
            </summary>
            <param name="o">Object to check if equal to.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.ToString">
            <summary>
            Convert Matrix3D to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Determinant">
            <summary>
            Calcluates the determinant of the matrix.
            </summary>
            <returns>The matrix determinant value.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Trace">
            <summary>
            Gets the trace of the matrix which is the sum of the diagonal entries.
            </summary>
            <returns>Returns the trace of the matrix.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Transpose">
            <summary>
            Transpose this matrix.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetTranspose">
            <summary>
            Gets the transpose of this matrix.
            </summary>
            <returns>Returns a trasposed matrix.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Transposed">
            <summary>
            Gets the transpose of this matrix.
            </summary>
            <returns>Returns a trasposed matrix.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetInverse">
            <summary>
            Compute the inverse of a general matrix using Cramers rule.
            I guess googling for cramers rule gives tons of references
            for this. :)
            </summary>
            <returns> a new Matrix with the inverse of this matrix</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Multiply(CommonUtils.MathLib.Matrix3D)">
            <summary>
            Multiplies self by a given matrix.
            </summary>
            <param name="m">The matrix to multiply with.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Multiply(System.Double)">
            <summary>
            Multiply self by a scalar.
            </summary>
            <param name="scalar">The scalar to multiply with.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.Divide(System.Double)">
            <summary>
            Divides self by a scalar.
            </summary>
            <param name="scalar">The scalar to divide with.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetQuaternion">
            <summary>
            Returns the quaternion associated with this direction cosine (rotation) matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.GetEuler">
            <summary>
            Compute the Euler-angles
            Also see Jack Kuipers, "Quaternions and Rotation Sequences", section 7.8.
            </summary>
            <returns>the Euler-angles</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Equality(CommonUtils.MathLib.Matrix3D,CommonUtils.MathLib.Matrix3D)">
            <summary>
            Checks if the two given matrices are equal.
            </summary>
            <param name="a">The first of two 3D matrices to compare.</param>
            <param name="b">The second of two 3D matrices to compare.</param>
            <returns><b>true</b> if the matrices are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Inequality(CommonUtils.MathLib.Matrix3D,CommonUtils.MathLib.Matrix3D)">
            <summary>
            Checks if the two given vectors are not equal.
            </summary>
            <param name="a">The first of two 3D vectors to compare.</param>
            <param name="b">The second of two 3D vectors to compare.</param>
            <returns><b>true</b> if the matrices are not equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:CommonUtils.MathLib.Matrix3D.Item(System.Int32)">
            <summary>
            An index accessor.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Matrix3D.Item(System.Int32,System.Int32)">
            <summary>
            An index accessor.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Multiply(CommonUtils.MathLib.Matrix3D,CommonUtils.MathLib.Matrix3D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="a">First matrix.</param>
            <param name="b">Second matrix.</param>
            <returns>The result of the multiply operation.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Multiply(CommonUtils.MathLib.Matrix3D,System.Double)">
            <summary>
            Multiplies a matrix with a scalar.
            </summary>
            <param name="source">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Division(CommonUtils.MathLib.Matrix3D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="source">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Matrix3D.op_Addition(CommonUtils.MathLib.Matrix3D,CommonUtils.MathLib.Matrix3D)">
            <summary>
            Add two matrices.
            </summary>
            <param name="m1">The first matrix to add.</param>
            <param name="m2">The second matrix to add.</param>
            <returns>Result is ( m1.M11 + m2.M11, m1.M12 + m2.M12, ...)</returns>
        </member>
        <member name="T:CommonUtils.MathLib.UniformRandom">
            <summary>
            An uniform random number generator 
            Generated random values will be in the [lower, upper) interval
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.UniformRandom.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Default constructor
            </summary>
            <param name="lower"></param>
            <param name="upper"></param>
            <param name="rand"></param>
        </member>
        <member name="M:CommonUtils.MathLib.UniformRandom.Next">
            <summary>
            Returns an uniform random double number
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.NormalRandom.Next">
            <summary>
            Returns a random double number
            It has an implementation of the Box-Muller transform.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.MathLib.Quaternion">
            <summary>
            <para>This class represents a Quaternion.</para>
            <para>
            A quaternion can be thought of as a 4D vector of form:
            q = [w, x, y, z] = w + xi + yj +zk.
            </para>
            <para>
            A Quaternion is often written as q = s + V where S represents
            the scalar part (w component) and V is a 3D vector representing
            the imaginery coefficients (x,y,z components).
            </para>
            Models the Quaternion representation of rotations.
            Quaternion is a representation of an arbitrary rotation through a
            quaternion. It has vector properties. This class also contains access
            functions to the euler angle representation of rotations and access to
            transformation matrices for 3D vectors. Transformations and euler angles are
            therefore computed once they are requested for the first time. Then they are
            cached for later usage as long as the class is not accessed trough
            a nonconst member function.
            
            
            Cooke, Zyda, Pratt, and McGhee, "NPSNET: Flight Simulation Dynamic Modeling
            Using Quaternions", Presence, Vol. 1, No. 4, pp. 404-420  Naval Postgraduate
            School, January 1994
            D. M. Henderson, "Euler Angles, Quaternions, and Transformation Matrices",
            JSC 12960, July 1977
            Richard E. McFarland, "A Standard Kinematic Model for Flight Simulation at
            NASA-Ames", NASA CR-2497, January 1975
            Barnes W. McCormick, "Aerodynamics, Aeronautics, and Flight Mechanics",
            Wiley &#38; Sons, 1979 ISBN 0-471-03032-5
            Bernard Etkin, "Dynamics of Flight, Stability and Control", Wiley &#38; Sons,
            1982 ISBN 0-471-08936-2		
            </summary>
            <remarks>
            Note: The order of rotations used in this class corresponds to a 3-2-1 sequence,
            or Y-P-R, or Z-Y-X, if you prefer.
            </remarks>
        </member>
        <member name="T:CommonUtils.MathLib.Quaternion.EulerAngles">
            Euler angles Phi, Theta, Psi
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.W">
            <summary>
            W coordinate.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class with the identity rotation.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class using given values.
            </summary>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class using the three euler angles.
            </summary>
            <param name="phi">The euler X axis (roll) angle in radians</param>
            <param name="tht">The euler Y axis (attitude) angle in radians</param>
            <param name="psi">The euler Z axis (heading) angle in radians</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(CommonUtils.MathLib.Quaternion.EulerAngles,System.Double)">
            <summary>
            Initializer by one euler angle.
             Initialize the quaternion with the single euler angle where its index
             is given in the first argument.
            </summary>
            <param name="idx">Index of the euler angle to initialize</param>
            <param name="angle">The euler angle in radians</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(CommonUtils.MathLib.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class using the three euler angles.
            </summary>
            <param name="vOrient"> A vector with the euler X axis (roll),Y axis (attitude) and Z axis (heading) angles in radians</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class using values from a given array of double.
            </summary>
            <param name="val">Quaternion parameters in order : W,X,Y,Z</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(CommonUtils.MathLib.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class using values from a given quaternion.
            </summary>
            <param name="q">Quaternion to copy parameters from.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(CommonUtils.MathLib.Matrix3D)">
            <summary>
            Initializer by matrix.
            Initialize the quaternion with the matrix representing a transform from one frame
            to another using the standard aerospace sequence, Yaw-Pitch-Roll(3-2-1).
            </summary>
            <param name="q">the rotation matrix</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Quaternion"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.Zero">
            <summary>
            The zero questernion.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.Identity">
            <summary>
            The identity quaternion.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.XAxis">
            <summary>
            X-Axis.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.YAxis">
            <summary>
            Y-Axis.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.ZAxis">
            <summary>
            Z-Axis.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.WAxis">
            <summary>
            W-Axis.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetHashCode">
            <summary>
            Get the hashcode for this quaternion instance.
            </summary>
            <returns>Returns the hash code for this vector instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Equals(System.Object)">
            <summary>
            Checks if a given quaternion equals to self.
            </summary>
            <param name="o">Object to check if equal to.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetMagnitude">
            <summary>
            Get the magnitude of the Quaternion.
            </summary>
            <returns>The magnitude of the vector :  Sqrt(W*W + X*X + Y*Y + Z*Z).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetMagnitudeSquared">
            <summary>
            Get the squared magnitude of the Quaternion.
            </summary>
            <returns>The squared magnitude of the vector : (W*W + X*X + Y*Y + Z*Z).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetQDot(CommonUtils.MathLib.Vector3D)">
            <summary>
            Returns the derivative of the quaternion coresponding to the
            angular velocities PQR.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetTransformationMatrix">
            <summary>
            Transformation matrix
            </summary>
            <returns>
            the transformation/rotation matrix
            corresponding to this quaternion rotation
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetT">
            <summary>
            Transformation matrix
            </summary>
            <returns>
            the transformation/rotation matrix
            corresponding to this quaternion rotation
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetTInv">
            <summary>
            Backward transformation matrix.
            </summary>
            <returns>
            inverse transformation/rotation matrix
            corresponding to this quaternion rotation
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetInverseTransformationMatrix">
            <summary>
            Inverse transformation matrix
            </summary>
            <returns>
            the inverse transformation/rotation matrix
            corresponding to this quaternion rotation
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetEuler">
            <summary>
            Retrieves the Euler angles.
            units radians.
            </summary>
            <returns>
            the triad of euler angles corresponding to this quaternion rotation.
            units radians
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetEuler(CommonUtils.MathLib.Quaternion.EulerAngles)">
            <summary>
            Retrieves the Euler angles.
            units radians.
            </summary>
            <param name="i">the Euler angle index.</param>
            <returns>a reference to the i-th euler angles corresponding
            to this quaternion rotation.
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetEulerDeg(CommonUtils.MathLib.Quaternion.EulerAngles)">
            <summary>
            Retrieves the Euler angles.
            units degrees
            </summary>
            <param name="i">the Euler angle index.</param>
            <returns>a reference to the i-th euler angles corresponding
            to this quaternion rotation.
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetEulerDeg">
            <summary>
             Retrieves the Euler angle vector.
             units degrees
            </summary>
            <returns>an Euler angle column vector corresponding
            to this quaternion rotation.
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetSinEuler">
            <summary>
            Retrieves sine of the euler angles.
            </summary>
            <returns>
            the sine of the Euler angle theta (pitch attitude) corresponding
            to this quaternion rotation.
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetSinEuler(CommonUtils.MathLib.Quaternion.EulerAngles)">
            <summary>
            Retrieves sine of the given euler angle.
            </summary>
            <param name="i">the sine of the Euler angle theta (pitch attitude) corresponding
            to this quaternion rotation.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetCosEuler">
            <summary>
            Retrieves cosine of the euler angles.
            </summary>
            <returns>
            the sine of the Euler angle theta (pitch attitude) corresponding
            to this quaternion rotation.
            </returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetCosEuler(CommonUtils.MathLib.Quaternion.EulerAngles)">
            <summary>
            Retrieves cosine of the given euler angle.
            </summary>
            <param name="i">the sine of the Euler angle theta (pitch attitude) corresponding
             to this quaternion rotation.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Inverse">
            <summary>
            Inverse self.
            Applies to non-zero Quaternions.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.UnitInverse">
            <summary>
            Inverse self.
            Apply to unit-length quaternion only.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetInverse">
            <summary>
            Create a new quaternion that is the transpose of self.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.GetUnitInverse">
            <summary>
            Create a new quaternion that is the transpose of self.
            Note : Can be used only on unit quaternions.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.QExp(CommonUtils.MathLib.Vector3D)">
            <summary>
            Quaternion exponential
            Calculate the unit quaternion which is the result of the exponentiation of
            the vector 'omega'.
            </summary>
            <param name="omega">rotation velocity</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.ToRotationMatrix">
            <summary>
            Gets a 3x3 rotation matrix from this Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.ToAngleAxis(System.Double@,CommonUtils.MathLib.Vector3D@)">
            <summary>
               
            </summary>
            <param name="angle"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Normalize">
            <summary>
            Normalize the vector to have the Magnitude() == 1.0. If the vector
            is equal to zero it is left untouched.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.ComputeDerived">
            <summary>
            Computation of derived values.
            This function checks if the derived values like euler angles and
            transformation matrices are already computed. If so, it
            returns. If they need to be computed the real worker routine
            <code>ComputeDerivedUnconditional() </code>
            is called.
            This function is inlined to avoid function calls in the fast path.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Add(CommonUtils.MathLib.Quaternion)">
            <summary>
            Add Quaternion to self.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Subtract(CommonUtils.MathLib.Quaternion)">
            <summary>
            Subtract Quaternion from self.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Multiply(CommonUtils.MathLib.Quaternion)">
            <summary>
            Multiply self by Quaternion.
            Note that this operation is NOT commutative.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Multiply(System.Double)">
            <summary>
            Multiply self by a scalar.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Divide(System.Double)">
            <summary>
            Divide self by a scalar.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.Dot(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Calculate the dot product of two vectors.
            </summary>
            <param name="a">The first vector for the operation.</param>
            <param name="b">The second vector for the operation.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Equality(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Checks if the two quternions are equal.
            </summary>
            <param name="a">The first of two quaternions to compare.</param>
            <param name="b">The second of two quaternions to compare.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Inequality(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Checks if the two given quaternions are not equal.
            </summary>
            <param name="a">The first of two quaternions to compare.</param>
            <param name="b">The second of two quaternions to compare.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Multiply(System.Double,CommonUtils.MathLib.Quaternion)">
            <summary>
            Multiply a quaternion by a double value.
            </summary>
            <param name="f">The double value to use.</param>
            <param name="q">The quaternion to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Multiply(CommonUtils.MathLib.Quaternion,System.Double)">
            <summary>
            Multiply a quaternion by a double value.
            </summary>
            <param name="f">The double value to use.</param>
            <param name="q">The quaternion to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Division(CommonUtils.MathLib.Quaternion,System.Double)">
            <summary>
            Divides a quaternion by a double value.
            </summary>
            <param name="f">The double value to use.</param>
            <param name="q">The quaternion to use.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Addition(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="a">The first of two quaternions to add.</param>
            <param name="b">The second of two quaternions to add.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Multiply(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Multiplication of two quaternions is like performing successive rotations.
            </summary>
            <param name="a">The first of two quaternions to be multiplied.</param>
            <param name="b">The second of two quaternions to be multiplied.</param>
            <returns>a quaternion representing Q, where Q = a * b</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Subtraction(CommonUtils.MathLib.Quaternion,CommonUtils.MathLib.Quaternion)">
            <summary>
            Substract two quaternions.
            </summary>
            <param name="a">The quaternions to substract from.</param>
            <param name="b">The quaternions to substract.</param>
            <returns></returns>
        </member>
        <member name="P:CommonUtils.MathLib.Quaternion.Item(System.Int32)">
            <summary>
            An index accessor ( [w, x, y, z] ).
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Quaternion.op_Explicit(CommonUtils.MathLib.Quaternion)~System.Double[]">
            <summary>
            Converts the vector to an array of double.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.mT">
            This stores the transformation matrices.  
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.mEulerAngles">
            The cached euler angles.  
        </member>
        <member name="F:CommonUtils.MathLib.Quaternion.mEulerSines">
            The cached sines and cosines of the euler angles.  
        </member>
        <member name="T:CommonUtils.MathLib.QuaternionNotInvertibleException">
            <exception cref="T:System.ApplicationException">Thrown when trying to invert an uninvertible quaternion.</exception>
        </member>
        <member name="M:CommonUtils.MathLib.QuaternionNotInvertibleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.QuaternionNotInvertibleException"/> class.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.QuaternionNotInvertibleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.QuaternionNotInvertibleException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:CommonUtils.MathLib.QuaternionNotInvertibleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.QuaternionNotInvertibleException"/> class 
            with a specified error message and a reference to the inner exception that is 
            the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:CommonUtils.MathLib.QuaternionNotInvertibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.QuaternionNotInvertibleException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:CommonUtils.MathLib.Vector3D">
            <summary>
            Vector class for 3D.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Vector3D"/> class using given coordinates.
            </summary>
            <param name="x">The vector's X coordinate.</param>
            <param name="y">The vector's Y coordinate.</param>
            <param name="z">The vector's Z coordinate.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Vector3D"/> class using given coordinates array.
            </summary>
            <param name="coordinates">An array of coordinate parameters.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.#ctor(CommonUtils.MathLib.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Vector3D"/> class using given coordinates from another vector.
            </summary>
            <param name="v">A 3D vector to assign values from.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonUtils.MathLib.Vector3D"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.Zero">
            <summary>
            3D Zero vector.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.XAxis">
            <summary>
            3D X Axis.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.YAxis">
            <summary>
            3D Y Axis.
            </summary>
        </member>
        <member name="F:CommonUtils.MathLib.Vector3D.ZAxis">
            <summary>
            3D Z Axis.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.GetHashCode">
            <summary>
            Get the hashcode for this vector instance.
            </summary>
            <returns>Returns the hash code for this vector instance.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Equals(System.Object)">
            <summary>
            Checks if a given vector equals to self.
            </summary>
            <param name="o">Object to check if equal to.</param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.ToString">
            <summary>
            Convert Vector3D to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Normalize">
            <summary>
            Scale the vector so that the magnitude is 1.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Magnitude">
            <summary>
            Get the magnitude of the vector.
            </summary>
            <returns>The magnitude of the vector : Sqrt( X*X + Y*Y + Z*Z ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.GetMagnitude(System.Int32,System.Int32)">
            <summary>
            Length of the vector in a coordinate axis plane.
            
            </summary>
            <returns>Compute and return the euclidean norm of this vector projected into
            the coordinate axis plane idx1-idx2.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.GetMagnitudeSquared">
            <summary>
            Get the squared magnitude of the vector.
            </summary>
            <returns>The squared magnitude of the vector : ( X*X + Y*Y + Z*Z ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.GetUnit">
            <summary>
            Get a unit vector representation of the current vector.
            </summary>
            <returns>A unit representation of the current vector.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Add(CommonUtils.MathLib.Vector3D)">
            <summary>
            Add vector to self.
            </summary>
            <param name="value">The vector to add</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Subtract(CommonUtils.MathLib.Vector3D)">
            <summary>
            Subtract vector from self.
            </summary>
            <param name="value">The vector to substract.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Multiply(System.Double)">
            <summary>
            Multiply self by a double value <paramref name="value"/>.
            </summary>
            <param name="value">The double value to use.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Divide(System.Double)">
            <summary>
            Multiply self by a double value <paramref name="value"/>.
            </summary>
            <param name="value">The double value to use.</param>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Dot(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Calculate the dot product (i.e. inner product) of <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first of two 3D vectors to dot.</param>
            <param name="b">The second of two 3D vectors to dot.</param>
            <returns>The dot product of <paramref name="v1"/> and <paramref name="v2"/>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Cross(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Calculate the cross product (i.e. outer product) of <paramref name="a"/> and <paramref name="b"/>.
            The cross product is calculated using right-handed rule.
            When using left-handed rule (which some graphics APIs like DirectX require) the
            sign of the cross product should be changed.
            </summary>
            <param name="a">The first of two 3D vectors to cross.</param>
            <param name="b">The second of two 3D vectors to cross.</param>
            <returns>The cross product of the two given vectors.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Multiply(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Calculate the cross product (i.e. outer product) of <paramref name="a"/> and <paramref name="b"/>.
            The cross product is calculated using right-handed rule.
            When using left-handed rule (which some graphics APIs like DirectX require) the
            sign of the cross product should be changed.
            </summary>
            <param name="a">The first of two 3D vectors to cross.</param>
            <param name="b">The second of two 3D vectors to cross.</param>
            <returns>The cross product of the two given vectors.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.UnitCross(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Calculate the cross product (i.e. outer product) of <paramref name="a"/> and <paramref name="b"/>.
            The cross product is calculated using right-handed rule.
            When using left-handed rule (which some graphics APIs like DirectX require) the
            sign of the cross operation result should be changed.
            </summary>
            <param name="a">The first of two 3D vectors to cross.</param>
            <param name="b">The second of two 3D vectors to cross.</param>
            <returns>The normalized cross product of the two given vectors.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Lerp(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,System.Double)">
            <summary>
            Linear interpolation between two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="time">Interpolation time [0..1].</param>
            <returns>Interpolated vector.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Equality(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the two given vectors are equal.
            </summary>
            <param name="a">The first of two 3D vectors to compare.</param>
            <param name="b">The second of two 3D vectors to compare.</param>
            <returns><b>true</b> if the vectors are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Inequality(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the two given vectors are not equal.
            </summary>
            <param name="a">The first of two 3D vectors to compare.</param>
            <param name="b">The second of two 3D vectors to compare.</param>
            <returns><b>true</b> if the vectors are not equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_LessThan(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the vector on the left side of the operator is less than the vector on the right side.
            </summary>
            <param name="vec1">The first of two 3D vectors to check.</param>
            <param name="vec2">The second of two 3D vectors to check.</param>
            <returns><b>true</b> if <paramref name="vec1"/> is smaller than <paramref name="vec2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_LessThanOrEqual(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the vector on the left side of the operator is less than or equal to the vector on the right side.
            </summary>
            <param name="vec1">The first of two 3D vectors to check.</param>
            <param name="vec2">The second of two 3D vectors to check.</param>
            <returns><b>true</b> if <paramref name="vec1"/> is smaller or equal to <paramref name="vec2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_GreaterThan(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the vector on the left side of the operator is greater than the vector on the right side.
            </summary>
            <param name="vec1">The first of two 3D vectors to check.</param>
            <param name="vec2">The second of two 3D vectors to check.</param>
            <returns><b>true</b> if <paramref name="vec1"/> is larger than <paramref name="vec2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_GreaterThanOrEqual(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if the vector on the left side of the operator is  greater than or equal to the vector on the right side.
            </summary>
            <param name="vec1">The first of two 3D vectors to check.</param>
            <param name="vec2">The second of two 3D vectors to check.</param>
            <returns><b>true</b> if <paramref name="vec1"/> is larger or equal to <paramref name="vec2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_UnaryNegation(CommonUtils.MathLib.Vector3D)">
            <summary>
            Invert the direction of the vector.
            </summary>
            <param name="p">The vector to invert.</param>
            <returns>Result is ( -vec.x, -vec.y, -vec.z ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Multiply(System.Double,CommonUtils.MathLib.Vector3D)">
            <summary>
            Multiply vector <paramref name="vec"/> by a double value <paramref name="f"/>.
            </summary>
            <param name="f">The double value.</param>
            <param name="vec">The vector.</param>
            <returns>Result is ( vec.X*f, vec.Y*f, vec.Z*f ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Multiply(CommonUtils.MathLib.Vector3D,System.Double)">
            <summary>
            Multiply vector <paramref name="vec"/> by a double value <paramref name="f"/>.
            </summary>
            <param name="f">The double value.</param>
            <param name="vec">The vector.</param>
            <returns>Result is ( vec.X*f, vec.Y*f, vec.Z*f ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Division(CommonUtils.MathLib.Vector3D,System.Double)">
            <summary>
            Divide vector <paramref name="vec"/> by a double value <paramref name="f"/>.
            </summary>
            <param name="vec">The vector.</param>
            <param name="f">The double value.</param>
            <returns>Result is ( vec.X/f, vec.Y/f, vec.Z/f ).</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Addition(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Add two vectors.
            </summary>
            <param name="vec1">The first vector to add.</param>
            <param name="vec2">The second vector to add.</param>
            <returns>Result is ( vec1.X + vec2.X, vec1.Y + vec2.Y, vec1.Z + vec2.Z )</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Subtraction(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Subtract two vectors.
            </summary>
            <param name="vec1">The vector to substract from.</param>
            <param name="vec2">The vector to substract.</param>
            <returns>Result is ( vec1.X - vec2.X, vec1.Y - vec2.Y, vec1.Z - vec2.Z )</returns>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Item(System.Int32)">
            <summary>
            An index accessor ( [X, Y, Z] ).
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.op_Explicit(CommonUtils.MathLib.Vector3D)~System.Double[]">
            <summary>
            Converts the vector to an array of doubles.
            </summary>
            <param name="value">The vector value to convert.</param>
            <returns>Result is an array of double values containing the vector coordinates.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.ApproxEquals(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Checks if two given vectors are approximately equal.
            </summary>
            <param name="vec1">The first of two 3D vectors to compare.</param>
            <param name="vec2">The second of two 3D vectors to compare.</param>
            <returns><b>true</b> if the vectors are approximately equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.ApproxEquals(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,System.Double)">
            <summary>
            Checks if two given vectors are approximately equal.
            </summary>
            <param name="vec1">The first of two 3D vectors to compare.</param>
            <param name="vec2">The second of two 3D vectors to compare.</param>
            <param name="epsilon">The epsilon value to use.</param>
            <returns><b>true</b> if the vectors are approximately equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:CommonUtils.MathLib.Vector3D.Entry(System.Int32)">
            TODO. Review this desing. 
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eX">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eY">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eZ">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Item(CommonUtils.MathLib.PositionType)">
            <summary>
            An index accessor ( [X, Y, Z] ).
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eP">
            <summary>
            P Rate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eQ">
            <summary>
            Q Rate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.eR">
            <summary>
            R Rate.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Item(CommonUtils.MathLib.RateType)">
            <summary>
            An Rate accessor ( [P, Q, R] ).
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Roll">
            <summary>
            Local frame orientation Roll.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Pitch">
             <summary>
            Local frame orientation Pitch.
             </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Yaw">
            <summary>
            Local frame orientation Yaw.
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Phi">
            <summary>
            Euler angles Phi
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Theta">
             <summary>
            Euler angles Theta
             </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Psi">
            <summary>
            Euler angles Psi
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.U">
            <summary>
            Velocities U
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.V">
             <summary>
            Velocities V
             </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.W">
            <summary>
            Velocities W
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CommonUtils.MathLib.Vector3D.P" -->
        <member name="P:CommonUtils.MathLib.Vector3D.Q">
            <summary>
            Angular velocity   Q
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.R">
            <summary>
            Angular velocity   R
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.North">
            <summary>
            Local frame position North
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.East">
            <summary>
            Local frame position East
            </summary>
        </member>
        <member name="P:CommonUtils.MathLib.Vector3D.Down">
            <summary>
            Local frame position Down
            </summary>
        </member>
        <member name="T:CommonUtils.MathLib.VectorAux">
            <summary>
            Additional vector routines.
            </summary>
        </member>
        <member name="M:CommonUtils.MathLib.VectorAux.MapVectorOntoSurfacePlane(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Map a vector onto a plane.
            </summary>
            <param name="normal">normal vector for the plane</param>
            <param name="v0">a point on the plane</param>
            <param name="vec">the vector to map onto the plane</param>
            <returns>the result vector</returns>
        </member>
        <member name="M:CommonUtils.MathLib.VectorAux.ClosestPointToLine(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Given a point p, and a line through p0 with direction vector d,
            find the closest point (p1) on the line.
            </summary>
            <param name="p">original point</param>
            <param name="p0">point on the line</param>
            <param name="d">vector defining line direction</param>
            <returns>closest point to p on the line</returns>
        </member>
        <member name="M:CommonUtils.MathLib.VectorAux.ClosestPointToLineDistSquared(CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D,CommonUtils.MathLib.Vector3D)">
            <summary>
            Given a point p, and a line through p0 with direction vector d,
            find the shortest distance (squared) from the point to the line.
            </summary>
            <param name="p">original point</param>
            <param name="p0">point on the line</param>
            <param name="d">vector defining line direction</param>
            <returns>shortest distance (squared) from p to line</returns>
        </member>
    </members>
</doc>
